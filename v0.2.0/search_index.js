var documenterSearchIndex = {"docs":
[{"location":"Level4.html#Solutions","page":"Solutions","title":"Solutions","text":"","category":"section"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"To handle solutions, the package again provides a default struct. This saves the following information:","category":"page"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"A given status that we want to associate with the solution. See for example the default one implemented in Status.\nA solution representation. The one implemented in the package consists of an array of fixed length (i.e, it does not vary its size once created).","category":"page"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"As an example, consider we have a problem with 12 constraints, a total of 9 variables and all of them are integer. Then:","category":"page"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"# We first build the status for the solution\nnumberConstraints = 12;\nmyStatus = OREnvironment.constructStatus(numberConstraints);\n# Then, we build the rest of the arguments required\ntypeOfVariables = Int;\nnumberOfVariables = 9; \nargs = (typeOfVariables, numberOfVariables, myStatus);\n# Finally, we build the solution \nmySolution = OREnvironment.constructSolution(:FixedLengthArray, args)","category":"page"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"A couple of important notes:","category":"page"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"If at least one of the variables is continuous, then use Float64 instead of Int.\nFor each solution you create, build a new status. Naturally, when dealing with multiple solutions you may want all of them to have the same type of status. However, if you simply pass as argument myStatus to all the solutions you build, Julia (probably) will create pointers. So instead of having one status per solution, you will have one status for ALL the solutions (which you don't want).","category":"page"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"Example of what NOT to do:","category":"page"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"numberConstraints = 12;\nmyStatus = OREnvironment.constructStatus(numberConstraints);\ntypeOfVariables = Int;\nnumberOfVariables = 9; \nargs = (typeOfVariables, numberOfVariables, myStatus);\n\ns1 = OREnvironment.constructSolution(:FixedLengthArray, args)\ns2 = OREnvironment.constructSolution(:FixedLengthArray, args) # we are recycling the status","category":"page"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"Example of what to do:","category":"page"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"numberConstraints = 12;\nmyStatus1 = OREnvironment.constructStatus(numberConstraints);\ntypeOfVariables = Int;\nnumberOfVariables = 9; \nargs = (typeOfVariables, numberOfVariables, myStatus1);\n\ns1 = OREnvironment.constructSolution(:FixedLengthArray, args)\n\n# See how this time we're building a new status for the new solution\nmyStatus2 = OREnvironment.constructStatus(numberConstraints);\nargs = (typeOfVariables, numberOfVariables, myStatus2);\ns2 = OREnvironment.constructSolution(:FixedLengthArray, args)","category":"page"},{"location":"Level4.html#About-the-constructor","page":"Solutions","title":"About the constructor","text":"","category":"section"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"You may wonder why in the constructor (see examples above) you have to provide :FixedLengthArray as an argument if, by default, it is the only option available. ","category":"page"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"The reason is that, when extending the package to consider other types of representations, you can build those by simply changing the arguments, not the name of the constructor.","category":"page"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"As an example, consider that you extend the package to deal with variable length arrays. If the arguments (args) to build that solution struct are the same, the only thing of your code that should change is :FixedLengthArray by :VariableLengthArray (in case you use that identifier).","category":"page"},{"location":"Level4.html#Methods-for-solution","page":"Solutions","title":"Methods for solution","text":"","category":"section"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"Pages = [\"Level4.md\"]","category":"page"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.constructSolution(solutionType::Symbol, args)","category":"page"},{"location":"Level4.html#OREnvironment.constructSolution-Tuple{Symbol, Any}","page":"Solutions","title":"OREnvironment.constructSolution","text":"constructSolution(solutionType, args)\n\nConstructs a container of type solutionType for the solution. Note that the arguments of the constructor are provided in args.\n\nExample\n\njulia> typeVariables = Int; numVariables = 5;  numConstraints = 3;\njulia> status = OREnvironment.constructStatus(numConstraints);\njulia> args = (typeVariables, numVariables, status);\njulia> s = OREnvironment.constructSolution(:FixedLengthArray, args)\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.is_feasible(s::OREnvironment.Solution)","category":"page"},{"location":"Level4.html#OREnvironment.is_feasible-Tuple{OREnvironment.Solution}","page":"Solutions","title":"OREnvironment.is_feasible","text":"is_feasible(s)\n\nReturns the feasibility value of solution s.\n\nExample\n\njulia> typeVariables = Int; numVariables = 5;  numConstraints = 3;\njulia> status = OREnvironment.constructStatus(numConstraints);\njulia> args = (typeVariables, numVariables, status);\njulia> s = OREnvironment.constructSolution(:FixedLengthArray, args)\njulia> OREnvironment.is_feasible(s)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.set_feasible!(s::OREnvironment.Solution, value::Bool)","category":"page"},{"location":"Level4.html#OREnvironment.set_feasible!-Tuple{OREnvironment.Solution, Bool}","page":"Solutions","title":"OREnvironment.set_feasible!","text":"set_feasible!(s, val)\n\nSets the feasibility value of solution s to val.\n\nExample\n\njulia> typeVariables = Int; numVariables = 5;  numConstraints = 3;\njulia> status = OREnvironment.constructStatus(numConstraints);\njulia> args = (typeVariables, numVariables, status);\njulia> s = OREnvironment.constructSolution(:FixedLengthArray, args)\njulia> OREnvironment.set_feasible!(s, true)\njulia> OREnvironment.is_feasible(s)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.is_optimal(s::OREnvironment.Solution)","category":"page"},{"location":"Level4.html#OREnvironment.is_optimal-Tuple{OREnvironment.Solution}","page":"Solutions","title":"OREnvironment.is_optimal","text":"is_optimal(s)\n\nReturns the optimality value of solution s.\n\nExample\n\njulia> typeVariables = Int; numVariables = 5;  numConstraints = 3;\njulia> status = OREnvironment.constructStatus(numConstraints);\njulia> args = (typeVariables, numVariables, status);\njulia> s = OREnvironment.constructSolution(:FixedLengthArray, args)\njulia> OREnvironment.is_optimal(s)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.set_optimal!(s::OREnvironment.Solution, value::Bool)","category":"page"},{"location":"Level4.html#OREnvironment.set_optimal!-Tuple{OREnvironment.Solution, Bool}","page":"Solutions","title":"OREnvironment.set_optimal!","text":"set_optimal!(s, val)\n\nSets the optimality value of solution s to val.\n\nExample\n\njulia> typeVariables = Int; numVariables = 5;  numConstraints = 3;\njulia> status = OREnvironment.constructStatus(numConstraints);\njulia> args = (typeVariables, numVariables, status);\njulia> s = OREnvironment.constructSolution(:FixedLengthArray, args)\njulia> OREnvironment.set_optimal!(s, true)\njulia> OREnvironment.is_optimal(s)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.get_objfunction(s::OREnvironment.Solution)","category":"page"},{"location":"Level4.html#OREnvironment.get_objfunction-Tuple{OREnvironment.Solution}","page":"Solutions","title":"OREnvironment.get_objfunction","text":"get_objfunction(s)\n\nReturns the objective function value of solution s.\n\nExample\n\njulia> typeVariables = Int; numVariables = 5;  numConstraints = 3;\njulia> status = OREnvironment.constructStatus(numConstraints);\njulia> args = (typeVariables, numVariables, status);\njulia> s = OREnvironment.constructSolution(:FixedLengthArray, args)\njulia> OREnvironment.get_objfunction(s)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.set_objfunction!(s::OREnvironment.Solution, value::Float64)","category":"page"},{"location":"Level4.html#OREnvironment.set_objfunction!-Tuple{OREnvironment.Solution, Float64}","page":"Solutions","title":"OREnvironment.set_objfunction!","text":"set_objfunction!(s, val)\n\nSets the objective function value of solution s to val.\n\nExample\n\njulia> typeVariables = Int; numVariables = 5;  numConstraints = 3;\njulia> status = OREnvironment.constructStatus(numConstraints);\njulia> args = (typeVariables, numVariables, status);\njulia> s = OREnvironment.constructSolution(:FixedLengthArray, args)\njulia> OREnvironment.set_objfunction!(s, 15.66)\njulia> OREnvironment.get_objfunction(s)\n15.66\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.get_constraint_consumption(s::OREnvironment.Solution, idxConstraint::Int)","category":"page"},{"location":"Level4.html#OREnvironment.get_constraint_consumption-Tuple{OREnvironment.Solution, Int64}","page":"Solutions","title":"OREnvironment.get_constraint_consumption","text":"get_constraint_consumption(s, idx)\n\nReturns the consumption of the idx constraint in solution s. \n\nNote: It returns the stored value, This method does not compute the consumption based on the current solution.\n\nExample\n\njulia> typeVariables = Int; numVariables = 5;  numConstraints = 3;\njulia> status = OREnvironment.constructStatus(numConstraints);\njulia> args = (typeVariables, numVariables, status);\njulia> s = OREnvironment.constructSolution(:FixedLengthArray, args)\njulia> OREnvironment.get_constraint_consumption(s, 2)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.set_constraint_consumption!(s::OREnvironment.Solution, idxConstraint::Int, value::Float64)","category":"page"},{"location":"Level4.html#OREnvironment.set_constraint_consumption!-Tuple{OREnvironment.Solution, Int64, Float64}","page":"Solutions","title":"OREnvironment.set_constraint_consumption!","text":"set_constraint_consumption!(s, idx, val)\n\nSets the consumption of the idx constraint in solution s to value val. \n\nExample\n\njulia> typeVariables = Int; numVariables = 5;  numConstraints = 3;\njulia> status = OREnvironment.constructStatus(numConstraints);\njulia> args = (typeVariables, numVariables, status);\njulia> s = OREnvironment.constructSolution(:FixedLengthArray, args)\njulia> OREnvironment.set_constraint_consumption(s, 2, 3.4);\njulia> OREnvironment.get_constraint_consumption(s, 2)\n3.4\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.is_first_solution_better(s1::OREnvironment.Solution,s2::OREnvironment.Solution, objSense::Symbol,feasibilityRequired::Bool)","category":"page"},{"location":"Level4.html#OREnvironment.is_first_solution_better-Tuple{OREnvironment.Solution, OREnvironment.Solution, Symbol, Bool}","page":"Solutions","title":"OREnvironment.is_first_solution_better","text":"is_first_solution_better(s1, s2, objSense, feasibilityRequired)\n\nReturns if solution s1 is better than solution s2. For the comparaison is required the objective function sense and if feasibility is a must in the comparaison.\n\nExample\n\njulia> typeVariables = Int; numVariables = 5;  numConstraints = 3;\njulia> status = OREnvironment.constructStatus(numConstraints);\njulia> args = (typeVariables, numVariables, status);\njulia> s1 = OREnvironment.constructSolution(:FixedLengthArray, args)\njulia> OREnvironment.set_feasible!(s1, true);\njulia> OREnvironment.set_objfunction!(s1, 19.8);\njulia> s2 = OREnvironment.constructSolution(:FixedLengthArray, args)\njulia> OREnvironment.set_feasible!(s2, false);\njulia> OREnvironment.set_objfunction!(s2, 100.0);\njulia> OREnvironment.is_first_solution_better(s1, s2, :max, true)\njulia> true\njulia> OREnvironment.is_first_solution_better(s1, s2, :max, false)\njulia> false\njulia> OREnvironment.set_feasible!(s2, true);\njulia> OREnvironment.is_first_solution_better(s1, s2, :max, true)\njulia> false\njulia> OREnvironment.is_first_solution_better(s1, s2, :min, true)\njulia> true\n\n\n\n\n\n","category":"method"},{"location":"Level4.html#Methods-for-Solution-when-dealing-with-Constraints","page":"Solutions","title":"Methods for Solution when dealing with Constraints","text":"","category":"section"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.update_constraint_consumption!(s::OREnvironment.Solution, constraints::Array{<:OREnvironment.Constraint,1})","category":"page"},{"location":"Level4.html#OREnvironment.update_constraint_consumption!-Tuple{OREnvironment.Solution, Vector{var\"#s1\"} where var\"#s1\"<:OREnvironment.Constraint}","page":"Solutions","title":"OREnvironment.update_constraint_consumption!","text":"update_constraint_consumption!(s, vconstr)\n\nGiven solution s and the constraints of the problem vconstr, this method computes the left-hand side of the constraints (constraint consumption) and saves the values in memory.\n\nSee file ./test/Solution.jl for an example.\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.update_constraint_consumption_and_feasibility!(s::OREnvironment.Solution,  constraints::Array{<:OREnvironment.Constraint,1})","category":"page"},{"location":"Level4.html#OREnvironment.update_constraint_consumption_and_feasibility!-Tuple{OREnvironment.Solution, Vector{var\"#s1\"} where var\"#s1\"<:OREnvironment.Constraint}","page":"Solutions","title":"OREnvironment.update_constraint_consumption_and_feasibility!","text":"update_constraint_consumption_and_feasibility!(s, vconstr)\n\nGiven solution s and the constraints of the problem vconstr, this method computes the left-hand side of the constraints (constraint consumption), saves the values in memory and update the feasibility status according to the results obtained.\n\nSee file ./test/Solution.jl for an example.\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.update_constraint_consumption!(s::OREnvironment.Solution, constraints::Array{<:OREnvironment.Constraint,1}, variable::Int, Δvariable::Real, idxConstraints::Array{Int,1})","category":"page"},{"location":"Level4.html#OREnvironment.update_constraint_consumption!-Tuple{OREnvironment.Solution, Vector{var\"#s1\"} where var\"#s1\"<:OREnvironment.Constraint, Int64, Real, Vector{Int64}}","page":"Solutions","title":"OREnvironment.update_constraint_consumption!","text":"update_constraint_consumption!(s, vconstr, var, Δ, idxConstraints)\n\nUpdates constraint consuption of solution s for the constraints of the problem (vconstr) when variable var has changed its value by Δ. idxConstraints is the vector of constraint indexes where variable var appears.\n\nNote that this method is more efficient than updating the constraint consumption by recomputing again all the left-hand sides of the constraints: Most of the constraints does not change when modifying a variable, and those which change, only do it in one variable! Thus, if only a few changes have occurred in the vector of solutions since the last update, this incremental method should be preferred.\n\nSee file ./test/Solution.jl for an example.\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.update_constraint_consumption_and_feasibility!(s::OREnvironment.Solution, constraints::Array{<:OREnvironment.Constraint,1}, variable::Int, Δvariable::Real, idxConstraints::Array{Int,1})","category":"page"},{"location":"Level4.html#OREnvironment.update_constraint_consumption_and_feasibility!-Tuple{OREnvironment.Solution, Vector{var\"#s1\"} where var\"#s1\"<:OREnvironment.Constraint, Int64, Real, Vector{Int64}}","page":"Solutions","title":"OREnvironment.update_constraint_consumption_and_feasibility!","text":"update_constraint_consumption_and_feasibility!(s, vconstr, var, Δ, idxConstraints)\n\nUpdates constraint consuption of solution s, and its feasibility status, for the constraints of the problem (vconstr) when variable var has changed its value by Δ. idxConstraints is the vector of constraint indexes where variable var appears.\n\nNote that this method is more efficient than updating the constraint consumption by recomputing again all the left-hand sides of the constraints: Most of the constraints does not change when modifying a variable, and those which change, only do it in one variable! Thus, if only a few changes have occurred in the vector of solutions since the last update, this incremental method should be preferred.\n\nSee file ./test/Solution.jl for an example.\n\n\n\n\n\n","category":"method"},{"location":"Level4.html#Methods-for-FixLenghtArray","page":"Solutions","title":"Methods for FixLenghtArray","text":"","category":"section"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"These have to be reimplemented when extending the package to new solution structures.","category":"page"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.create_empty_solution(problem::OREnvironment.Problem, typeVariables::DataType)","category":"page"},{"location":"Level4.html#OREnvironment.create_empty_solution-Tuple{OREnvironment.Problem, DataType}","page":"Solutions","title":"OREnvironment.create_empty_solution","text":"create_empty_solution(problem, T)\n\nConstructs an empty solution of type :FixedLengthArray with variables of type T with the information contained in problem (num of constraints, of variables).\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.get_solution(s::OREnvironment.FixedLengthArray{T}, variable::Int) where {T<:Real}","category":"page"},{"location":"Level4.html#OREnvironment.get_solution-Union{Tuple{T}, Tuple{OREnvironment.FixedLengthArray{T}, Int64}} where T<:Real","page":"Solutions","title":"OREnvironment.get_solution","text":"get_solution(s, var)\n\nReturns the solution value of variable/index var.\n\nExample\n\njulia> typeVariables = Int; numVariables = 5;  numConstraints = 3;\njulia> status = OREnvironment.constructStatus(numConstraints);\njulia> args = (typeVariables, numVariables, status);\njulia> s = OREnvironment.constructSolution(:FixedLengthArray, args)\njulia> OREnvironment.get_solution(s, 2)\n0\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.add_solution!(s::OREnvironment.FixedLengthArray{T}, variable::Int, value::T) where {T<:Real}","category":"page"},{"location":"Level4.html#OREnvironment.add_solution!-Union{Tuple{T}, Tuple{OREnvironment.FixedLengthArray{T}, Int64, T}} where T<:Real","page":"Solutions","title":"OREnvironment.add_solution!","text":"add_solution!(s, var, val)\n\nSets the solution value of variable/index var to val\n\nExample\n\njulia> typeVariables = Int; numVariables = 5;  numConstraints = 3;\njulia> status = OREnvironment.constructStatus(numConstraints);\njulia> args = (typeVariables, numVariables, status);\njulia> s = OREnvironment.constructSolution(:FixedLengthArray, args)\njulia> OREnvironment.add_solution!(s, 2, 4)\njulia> OREnvironment.get_solution(s, 2)\n4\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.remove_solution!(s::OREnvironment.FixedLengthArray{T}, variable::Int) where {T<:Real}","category":"page"},{"location":"Level4.html#OREnvironment.remove_solution!-Union{Tuple{T}, Tuple{OREnvironment.FixedLengthArray{T}, Int64}} where T<:Real","page":"Solutions","title":"OREnvironment.remove_solution!","text":"remove_solution!(s, var)\n\nSets the solution value of variable/index var to 0.\n\nExample\n\njulia> typeVariables = Int; numVariables = 5;  numConstraints = 3;\njulia> status = OREnvironment.constructStatus(numConstraints);\njulia> args = (typeVariables, numVariables, status);\njulia> s = OREnvironment.constructSolution(:FixedLengthArray, args)\njulia> OREnvironment.add_solution!(s, 2, 4)\njulia> OREnvironment.get_solution(s, 2)\n4\njulia> OREnvironment.remove_solution!(s, 2)\njulia> OREnvironment.get_solution(s, 2)\n0\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.remove_all_solutions!(s::OREnvironment.FixedLengthArray{T}) where {T<:Real}","category":"page"},{"location":"Level4.html#OREnvironment.remove_all_solutions!-Union{Tuple{OREnvironment.FixedLengthArray{T}}, Tuple{T}} where T<:Real","page":"Solutions","title":"OREnvironment.remove_all_solutions!","text":"remove_all_solution!(s)\n\nSets the solution value of all the variables to 0.\n\nExample\n\njulia> typeVariables = Int; numVariables = 5;  numConstraints = 3;\njulia> status = OREnvironment.constructStatus(numConstraints);\njulia> args = (typeVariables, numVariables, status);\njulia> s = OREnvironment.constructSolution(:FixedLengthArray, args)\njulia> OREnvironment.add_solution!(s, 1, 12)\njulia> OREnvironment.get_solution(s, 1)\n12\njulia> OREnvironment.add_solution!(s, 2, 4)\njulia> OREnvironment.get_solution(s, 2)\n4\njulia> OREnvironment.remove_all_solution!(s)\njulia> OREnvironment.get_solution(s, 1)\n0\njulia> OREnvironment.get_solution(s, 2)\n0\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.add_solution_and_update_status!(s::OREnvironment.FixedLengthArray{T}, variable::Int, value::T, p::OREnvironment.Problem) where {T<:Real}","category":"page"},{"location":"Level4.html#OREnvironment.add_solution_and_update_status!-Union{Tuple{T}, Tuple{OREnvironment.FixedLengthArray{T}, Int64, T, OREnvironment.Problem}} where T<:Real","page":"Solutions","title":"OREnvironment.add_solution_and_update_status!","text":"add_solution_and_update_status!(s, var, val, p)\n\nSets the solution value of variable/index var to val and updates the status of the solution (including the consumption of the constraints in problem p).\n\nSee file ./test/Solution.jl for an example.\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.remove_solution_and_update_status!(s::OREnvironment.FixedLengthArray{T}, variable::Int, p::OREnvironment.Problem) where {T<:Real}","category":"page"},{"location":"Level4.html#OREnvironment.remove_solution_and_update_status!-Union{Tuple{T}, Tuple{OREnvironment.FixedLengthArray{T}, Int64, OREnvironment.Problem}} where T<:Real","page":"Solutions","title":"OREnvironment.remove_solution_and_update_status!","text":"remove_solution_and_update_status!(s, var, p)\n\nSets the solution value of variable/index var to 0 and updates the status of the solution (including the consumption of the constraints in problem p).\n\nSee file ./test/Solution.jl for an example.\n\n\n\n\n\n","category":"method"},{"location":"Level4.html","page":"Solutions","title":"Solutions","text":"OREnvironment.remove_all_solutions_and_update_status!(s::OREnvironment.FixedLengthArray{T}, p::OREnvironment.Problem) where {T<:Real}","category":"page"},{"location":"Level4.html#OREnvironment.remove_all_solutions_and_update_status!-Union{Tuple{T}, Tuple{OREnvironment.FixedLengthArray{T}, OREnvironment.Problem}} where T<:Real","page":"Solutions","title":"OREnvironment.remove_all_solutions_and_update_status!","text":"remove_all_solution_and_update_status!(s, p)\n\nSets the solution value of all the variables to 0 and updates the status of the solution (including the consumption of the constraints in problem p).\n\nSee file ./test/Solution.jl for an example.\n\n\n\n\n\n","category":"method"},{"location":"index.html#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"OREnvironment is a package to handle optimization problems in Julia. For the moment (no plan to change that in the short term), the package is oriented to deal with Mix Integer Linear Programming (MILP) problems.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The package by itself is not that useful. It is thought to be used as a base for other packages I am working on. E.g, to automatically obtain lower bounds in MILP problems.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The package basically handles constraints and solutions under a common framework (OREnvironment), so it is easier to develop solution methods, testing similar algorithms, reuse code between projects, etc. It also incorporates a couple of interesting ideas to manage everything more efficiently.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The structure of the documentation is as follows. First, it is exposed how to handle constraints. Then, the problem environment is presented. Finally, the frameworks to handle solution status and solutions are discussed.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"To install it:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia pkg> add https://github.com/DavidGarHeredia/OREnvironment.jl.git`","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"warning: Warning\nThe code makes extensive use of the macro @inbounds. So be careful when accessing arrays.","category":"page"},{"location":"Level5.html#Movements","page":"Movements","title":"Movements","text":"","category":"section"},{"location":"Level5.html","page":"Movements","title":"Movements","text":"When developing algorithms, some operations repeatedly appear to explore the solution space. Here we provide functions for some of those so they do not have to be programmed by the user.","category":"page"},{"location":"Level5.html#Methods-for-solution","page":"Movements","title":"Methods for solution","text":"","category":"section"},{"location":"Level5.html","page":"Movements","title":"Movements","text":"Pages = [\"Level5.md\"]","category":"page"},{"location":"Level5.html","page":"Movements","title":"Movements","text":"OREnvironment.inverse_order!(s::OREnvironment.FixedLengthArray{T}, firstVariable::Int, lastVariable::Int, p::OREnvironment.Problem) where {T<:Real}","category":"page"},{"location":"Level5.html#OREnvironment.inverse_order!-Union{Tuple{T}, Tuple{OREnvironment.FixedLengthArray{T}, Int64, Int64, OREnvironment.Problem}} where T<:Real","page":"Movements","title":"OREnvironment.inverse_order!","text":"inverse_order!(s, var1, var2, p)\n\nFor solution s, this function reverses the order of the values between var1 and var2. For example, the inverse order of [1.2, 3.4, 6.0, 8.9] is [8.9, 6.0, 3.4, 1.2]. \n\nThe status of the solution (e.g., feasibility) is updated using the information in problem p.\n\nExample\n\nSee examples in tests.\n\n\n\n\n\n","category":"method"},{"location":"Level5.html","page":"Movements","title":"Movements","text":"OREnvironment.undo_inverse!(s::OREnvironment.FixedLengthArray{T}, firstVariable::Int, lastVariable::Int, p::OREnvironment.Problem) where {T<:Real}","category":"page"},{"location":"Level5.html#OREnvironment.undo_inverse!-Union{Tuple{T}, Tuple{OREnvironment.FixedLengthArray{T}, Int64, Int64, OREnvironment.Problem}} where T<:Real","page":"Movements","title":"OREnvironment.undo_inverse!","text":"undo_inverse!(s, var1, var2, p)\n\nThis function undoes the last called of function inverse_order.\n\nExample\n\nSee examples in tests.\n\n\n\n\n\n","category":"method"},{"location":"Level5.html","page":"Movements","title":"Movements","text":"OREnvironment.swap_values!(s::OREnvironment.FixedLengthArray{T}, variable1::Int, variable2::Int, p::OREnvironment.Problem) where {T<:Real}","category":"page"},{"location":"Level5.html#OREnvironment.swap_values!-Union{Tuple{T}, Tuple{OREnvironment.FixedLengthArray{T}, Int64, Int64, OREnvironment.Problem}} where T<:Real","page":"Movements","title":"OREnvironment.swap_values!","text":"swap_values!(s, var1, var2, p)\n\nFor solution s, this function changes the values of variables var1 and var2, so the var1 now takes the value of var2 and var2 the value of var1.\n\nThe status of the solution (e.g., feasibility) is updated using the information in problem p.\n\nExample\n\nSee examples in tests.\n\n\n\n\n\n","category":"method"},{"location":"Level5.html","page":"Movements","title":"Movements","text":"OREnvironment.undo_swap!(s::OREnvironment.FixedLengthArray{T}, variable1::Int, variable2::Int, p::OREnvironment.Problem) where {T<:Real}","category":"page"},{"location":"Level5.html#OREnvironment.undo_swap!-Union{Tuple{T}, Tuple{OREnvironment.FixedLengthArray{T}, Int64, Int64, OREnvironment.Problem}} where T<:Real","page":"Movements","title":"OREnvironment.undo_swap!","text":"undo_swap!(s, var1, var2, p)\n\nThis function undoes the last called of function swap_values.\n\nExample\n\nSee examples in tests.\n\n\n\n\n\n","category":"method"},{"location":"Level5.html","page":"Movements","title":"Movements","text":"OREnvironment.flip_value!(s::OREnvironment.FixedLengthArray{T}, variable::Int, p::OREnvironment.Problem) where {T<:Real}","category":"page"},{"location":"Level5.html#OREnvironment.flip_value!-Union{Tuple{T}, Tuple{OREnvironment.FixedLengthArray{T}, Int64, OREnvironment.Problem}} where T<:Real","page":"Movements","title":"OREnvironment.flip_value!","text":"flip_value!(s, var, p)\n\nFor solution s, this function puts var to 0 if it has value 1 and viceversa. If the value of the variable is different than 1 or 0, then nothing happens.\n\nThe status of the solution (e.g., feasibility) is updated using the information in problem p.\n\nExample\n\nSee examples in tests.\n\n\n\n\n\n","category":"method"},{"location":"Level5.html","page":"Movements","title":"Movements","text":"OREnvironment.undo_flip!(s::OREnvironment.FixedLengthArray{T}, variable::Int, p::OREnvironment.Problem) where {T<:Real}","category":"page"},{"location":"Level5.html#OREnvironment.undo_flip!-Union{Tuple{T}, Tuple{OREnvironment.FixedLengthArray{T}, Int64, OREnvironment.Problem}} where T<:Real","page":"Movements","title":"OREnvironment.undo_flip!","text":"undo_flip!(s, var, p)\n\nThis function undoes the last called of function flip_value.\n\nExample\n\nSee examples in tests.\n\n\n\n\n\n","category":"method"},{"location":"Level5.html","page":"Movements","title":"Movements","text":"OREnvironment.mirror_value!(s::OREnvironment.FixedLengthArray{T}, variable::Int, p::OREnvironment.Problem) where {T<:Real}","category":"page"},{"location":"Level5.html#OREnvironment.mirror_value!-Union{Tuple{T}, Tuple{OREnvironment.FixedLengthArray{T}, Int64, OREnvironment.Problem}} where T<:Real","page":"Movements","title":"OREnvironment.mirror_value!","text":"mirror_value!(s, var, p)\n\nIf variable var in solution s has a value x[var]=z, and the variable is bounded to the interval (it may be discrete) [lb, ub], then the variable is assigned value ub+lb-z.\n\nFor example, if x[var]=4 and [lb, ub] = [1,5], then, after calling the function, x[var] = 2. Notice that if you draw the bounds in the real line: 1-2-3-4-5, value 2 is the mirror of 4. Meaning that if you fold the interval by its middle point (which in the example is 3), value 2 and 4 would touch.\n\nIf the value of the variable is not within its bounds, then nothing happens.\n\nThe status of the solution (e.g., feasibility) is updated using the information in problem p.\n\nExample\n\nSee examples in tests.\n\n\n\n\n\n","category":"method"},{"location":"Level5.html","page":"Movements","title":"Movements","text":"OREnvironment.undo_mirror!(s::OREnvironment.FixedLengthArray{T}, variable::Int, p::OREnvironment.Problem) where {T<:Real}","category":"page"},{"location":"Level5.html#OREnvironment.undo_mirror!-Union{Tuple{T}, Tuple{OREnvironment.FixedLengthArray{T}, Int64, OREnvironment.Problem}} where T<:Real","page":"Movements","title":"OREnvironment.undo_mirror!","text":"undo_mirror!(s, var, p)\n\nThis function undoes the last called of function mirror_value.\n\nExample\n\nSee examples in tests.\n\n\n\n\n\n","category":"method"},{"location":"Level1.html#Constraints","page":"Constraints","title":"Constraints","text":"","category":"section"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"By default, the package provides a struct to handle constraints. For each constraint, the following information is saved:","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"The value of the right-hand side.\nThe type of the constraint (<=, = or >=). \nThe variables (indexes) and coefficients making the left-hand side of the constraint.","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"With respect to the type of constraint, this is specified as a symbol. Specifically, the valid values are :lessOrEq, :equal or :greaterOrEq.","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"So for instance, if our MILP problem had the following constraint:","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"x_1 + 2x_3 - 4x_7 + 3x_9 leq 17 ","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"We would build it as follows:","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"vars1   = [1, 3, 7, 9];\ncoeffs1 = [1.0, 2.0, -4.0, 3.0]; \nrhs1 = 17.0; \nmyConstraint1 = OREnvironment.constructConstraint(rhs1, :lessOrEq, vars1, coeffs1);","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"note: Note\nThe coefficients and right-hand side values of the constraints must be specified as Float64 numbers. I used to have that as a template so other types (e.g, Int) could be considered. However, I changed my mind and mimic the behavior of Gurobi, which apparently (maybe I missed something) only works with Float64 numbers. ","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"As a final example, imagine that in your problem you also had the constraint ","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"53x_3 - 4x_4 geq 5 ","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"Then, you would have to build it as follows:","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"vars2   = [3, 4];\ncoeffs2 = [5.3, -4.0]; \nrhs2 = 5.0; \nmyConstraint2 = OREnvironment.constructConstraint(rhs2, :greaterOrEq, vars2, coeffs2);","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"If for any reason this default constraint structure doesn't fulfill your needs, you can always define a new type of constraint while reusing most of the methods available for the default version. See further discussion later on this page.","category":"page"},{"location":"Level1.html#Building-constraints-as-in-practice","page":"Constraints","title":"Building constraints as in practice","text":"","category":"section"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"In most cases, you don't build constraints one by one as shown above, but you read them from a file or some data structure. Let's see how this can accomplish in OREnvironment. We show two different ways. One will be more useful than the other depending on the situation.","category":"page"},{"location":"Level1.html#Option-1","page":"Constraints","title":"Option 1","text":"","category":"section"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"Imagine that we have the information about the constraints (variables, coefficients, etc) stored in a dataframe of N rows. Then we will create the constraints as follows:","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"constraints = Array{OREnvironment.Constraint, 1}(); # vector of constraints\nfor i in 1:N\n  c = OREnvironment.constructConstraint(df.rhs[i], df.symbol[i], df.vars[i], df.coefs[i]);\n  push!(constraints, c);\nend","category":"page"},{"location":"Level1.html#Option-2","page":"Constraints","title":"Option 2","text":"","category":"section"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"On some occasions, you will have your constraints stored in a text file. Then, you can load the constraints as follows:","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"file = \"NameOfTheFileWithTheConstraints.txt\"\nconstraints = OREnvironment.read_constraints(file);","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"For an example (which I highly recommed you to read), check the file ./test/sampleConstraints.txt and the @testset \"read_constraints\" in file  ./test/Constraints.jl","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"note: Note\nFunction OREnvironment.read_constraints() makes some important assumptions in the file to read:In the file, the constraints are separated by a newline. That is, no comma or other character appears at the end of each line.\nIn the file, all the variables are named as \"x\". To distinguish between variables an index is added. So for instance, if your constraint were 2x + 3y + 5 z = 12, you should write in your file: 2x1 + 3x2 + 5x3 >= 12.\nAll the variables must have a coefficient multiplying them. That is, if your constraint is of type x_1 + x_2 leq 3 you must write 1 as a coefficient. So your constraint in the file looks like: 1x1 + 1x2 <= 3. \nAll the terms in the left-hand side are adding. Negative symbols are for the numbers. So for instance, if your constraint were 4x_3 -53x_12 + x_152 = 3, in your file you should write: 4x3 + -5.3x12 + 1x152 = 3.","category":"page"},{"location":"Level1.html#Some-technical-details","page":"Constraints","title":"Some technical details","text":"","category":"section"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"The type of constraint considered by default is called OREnvironment.DefaultConstraint, which inherits from OREnvironment.Constraint. So you can define your own type of constraint and reuse most of the code (if not all) available for OREnvironment.Constraint by using inheritance.","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"An interesting feature of OREnvironment.DefaultConstraint is that, although it just asks for the variables and coefficients making the left-hand side of a constraint, it handles this information in a special way. It saves the information distinguishing between variables with a positive coefficient and variables with a negative one. This is an idea that I read from a paper by the people of LocalSolver, which is particularly useful to develop black-box solver methods. The relationship between variables and coefficients is saved in a Julia dictionary for fast access.","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"For more information you can always check the source code /src/Constraints.jl.","category":"page"},{"location":"Level1.html#Methods-for-constraints","page":"Constraints","title":"Methods for constraints","text":"","category":"section"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"We finish this part of the documentation showing the methods available to deal with constraints.","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"Pages = [\"Level1.md\"]","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.constructConstraint(rhs::Float64, constraintType::Symbol, variables::Array{Int,1}, coefficients::Array{Float64,1})","category":"page"},{"location":"Level1.html#OREnvironment.constructConstraint-Tuple{Float64, Symbol, Vector{Int64}, Vector{Float64}}","page":"Constraints","title":"OREnvironment.constructConstraint","text":"constructConstraint(rhs, t, vars, coefs)\n\nConstructs a DefaultConstraint with right-hand side rhs, type t and left-hand side given by the variables in vars and coefficients in coefs.\n\nNote: Both, the rhs and coefs must be of type Float64.\n\nExample\n\njulia> OREnvironment.constructConstraint(12.0, :lessOrEq, [1, 3, 12, 33], [2.0, 5.0, 3.0, 1.0]);\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.get_rhs(c::OREnvironment.Constraint)","category":"page"},{"location":"Level1.html#OREnvironment.get_rhs-Tuple{OREnvironment.Constraint}","page":"Constraints","title":"OREnvironment.get_rhs","text":"get_rhs(c)\n\nReturns the right-hand side value of constraint c\n\nExample\n\njulia> c = OREnvironment.constructConstraint(12.0, :lessOrEq, [1, 3, 12, 33], [2.0, 5.0, 3.0, 1.0]);\njulia> OREnvironment.get_rhs(c)\n12.0\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.set_rhs!(c::OREnvironment.Constraint, val::Float64)","category":"page"},{"location":"Level1.html#OREnvironment.set_rhs!-Tuple{OREnvironment.Constraint, Float64}","page":"Constraints","title":"OREnvironment.set_rhs!","text":"set_rhs!(c, val)\n\nSets the right-hand side value of constraint c to val\n\nExample\n\njulia> c = OREnvironment.constructConstraint(12.0, :lessOrEq, [1, 3, 12, 33], [2.0, 5.0, 3.0, 1.0]);\njulia> OREnvironment.set_rhs!(c, 25.0); \njulia> OREnvironment.get_rhs(c)\n25.0\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.get_type(c::OREnvironment.Constraint)","category":"page"},{"location":"Level1.html#OREnvironment.get_type-Tuple{OREnvironment.Constraint}","page":"Constraints","title":"OREnvironment.get_type","text":"get_type(c)\n\nReturns the constraint type of c. Admisible values are :lessOrEq, :equal and :greaterOrEq.\n\nExample\n\njulia> c = OREnvironment.constructConstraint(12.0, :lessOrEq, [1, 3, 12, 33], [2.0, 5.0, 3.0, 1.0]);\njulia> OREnvironment.get_type(c)\n:lessOrEq\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.set_type!(c::OREnvironment.Constraint, val::Symbol)","category":"page"},{"location":"Level1.html#OREnvironment.set_type!-Tuple{OREnvironment.Constraint, Symbol}","page":"Constraints","title":"OREnvironment.set_type!","text":"set_type!(c, val)\n\nSets the constraint type of c to val. Admisible values are :lessOrEq, :equal and :greaterOrEq.\n\nExample\n\njulia> c = OREnvironment.constructConstraint(12.0, :lessOrEq, [1, 3, 12, 33], [2.0, 5.0, 3.0, 1.0]);\njulia> OREnvironment.set_type!(c, :greaterOrEq);\njulia> OREnvironment.get_type(c)\n:greaterOrEq\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.is_variable(c::OREnvironment.Constraint, pos::Int)","category":"page"},{"location":"Level1.html#OREnvironment.is_variable-Tuple{OREnvironment.Constraint, Int64}","page":"Constraints","title":"OREnvironment.is_variable","text":"is_variable(c, var)\n\nReturns true if variable var is in constraint c.\n\nExample\n\njulia> c = OREnvironment.constructConstraint(12.0, :lessOrEq, [1, 3, 12, 33], [2.0, 5.0, 3.0, 1.0]);\njulia> OREnvironment.is_variable(c, 33)\ntrue\njulia> OREnvironment.is_variable(c, 13)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.get_coefficient(c::OREnvironment.Constraint, pos::Int)","category":"page"},{"location":"Level1.html#OREnvironment.get_coefficient-Tuple{OREnvironment.Constraint, Int64}","page":"Constraints","title":"OREnvironment.get_coefficient","text":"get_coefficient(c, var)\n\nReturns the coefficient of variable var in constraint c. If the variable is not in the constraint it returns 0.0;\n\nExample\n\njulia> c = OREnvironment.constructConstraint(12.0, :lessOrEq, [1, 3, 12, 33], [2.0, 5.0, 3.0, 1.0]);\njulia> OREnvironment.get_coefficient(c, 33)\n1.0\njulia> OREnvironment.get_coefficient(c, 3)\n5.0\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.set_coefficient!(c::OREnvironment.Constraint, pos::Int,\nval::Float64)","category":"page"},{"location":"Level1.html#OREnvironment.set_coefficient!-Tuple{OREnvironment.Constraint, Int64, Float64}","page":"Constraints","title":"OREnvironment.set_coefficient!","text":"set_coefficient!(c, var, coef)\n\nSets in constraint c coefficient coef for variable var. \n\nNote: If the variable was not in the constraint, it is added to it. Note that the vector that relates variables and constraints in the Problem struct is not updated when calling this adding a variable using this method!\n\nExample\n\njulia> c = OREnvironment.constructConstraint(12.0, :lessOrEq, [1, 3, 12, 33], [2.0, 5.0, 3.0, 1.0]);\njulia> OREnvironment.set_coefficient!(c, 33, 123.0);\njulia> OREnvironment.get_coefficient(c, 33)\n123.0\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.get_relationship_variables_constraints(constraints::Array{<:OREnvironment.Constraint,1}, nVariables::Int)","category":"page"},{"location":"Level1.html#OREnvironment.get_relationship_variables_constraints-Tuple{Vector{var\"#s1\"} where var\"#s1\"<:OREnvironment.Constraint, Int64}","page":"Constraints","title":"OREnvironment.get_relationship_variables_constraints","text":"get_relationship_variables_constraints(vconstraints, nVariables)\n\nGiven an Array of constraints vconstraints and the number of variables in the problem, returns an Array where the i-th element is an Array with the indexes of the constraints where the i-th variable appears.\n\nThis function is employed in the Problem struct so it is possible to quickly identify what constraints in the problem are affected when a variable changes its value. This permits faster updates of the left-hand side value associated to a given solution.\n\nExample\n\njulia> c1 = OREnvironment.constructConstraint(12.0, :lessOrEq, [1, 3, 4], [2.0, 5.0, 3.0]);\njulia> c2 = OREnvironment.constructConstraint(5.0, :equal, [2, 3, 5], [9.0, 1.0, 7.0]);\njulia> constraints = [c1, c2];\njulia> nVariables = 5;\njulia> OREnvironment.get_relationship_variables_constraints(constraints, nVariables)\n5-element Array{Array{Int64,1},1}:\n [1]\n [2]\n [1, 2]\n [1]\n [2]\n # So variable 1 appears in constraint 1, variable 2 in constraint 2, \n # variable 3 in constraints 1 and 2...\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.read_constraints(file::String)","category":"page"},{"location":"Level1.html#OREnvironment.read_constraints-Tuple{String}","page":"Constraints","title":"OREnvironment.read_constraints","text":"read_constraints(file)\n\nReturns an Array of constraints. The constraints are read from file.\n\nSee example in the file with the tests: ./test/Constraints.jl.\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.is_feasible(c::OREnvironment.Constraint, lhs::Float64)","category":"page"},{"location":"Level1.html#OREnvironment.is_feasible-Tuple{OREnvironment.Constraint, Float64}","page":"Constraints","title":"OREnvironment.is_feasible","text":"is_feasible(c, lhs)\n\nGiven a constraint c, returns if the left-hand side consumption lhs is feasible or not.\n\nExample\n\njulia> c = OREnvironment.constructConstraint(12.0, :lessOrEq, [1, 3, 4], [2.0, 5.0, 3.0]);\njulia> OREnvironment.is_feasible(c, 6.0)\ntrue\njulia> OREnvironment.is_feasible(c, 16.0)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.is_active(c::OREnvironment.Constraint, lhs::Float64)","category":"page"},{"location":"Level1.html#OREnvironment.is_active-Tuple{OREnvironment.Constraint, Float64}","page":"Constraints","title":"OREnvironment.is_active","text":"is_active(c, lhs)\n\nGiven a constraint c, returns if the left-hand side consumption lhs makes the constraint active or not.\n\nExample\n\njulia> c = OREnvironment.constructConstraint(12.0, :lessOrEq, [1, 3, 4], [2.0, 5.0, 3.0]);\njulia> OREnvironment.is_active(c, 6.0)\nfalse\njulia> OREnvironment.is_active(c, 12.0)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.compute_lhs_after_increment(variable::Int, variable::Real, currentLHS::Float64, c::OREnvironment.Constraint)","category":"page"},{"location":"Level1.html#OREnvironment.compute_lhs_after_increment-Tuple{Int64, Real, Float64, OREnvironment.Constraint}","page":"Constraints","title":"OREnvironment.compute_lhs_after_increment","text":"compute_lhs_after_increment(var, Δ, currentLHS, c)\n\nFor a change of Δ in the value of variable var, returns the new left-hand side consumption in constraint c given the current consumption currentLHS.\n\nExample\n\njulia> c = OREnvironment.constructConstraint(12.0, :lessOrEq, [1, 3, 4], [2.0, 5.0, 3.0]);\njulia> Δ = 3; currentLHS = 9.0;\njulia> OREnvironment.compute_lhs_after_increment(1, Δ, currentLHS, c)\n15.0 # = 2*Δ + currentLHS\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.is_increment_feasible(variable::Int, variable::Real, currentLHS::Float64, c::OREnvironment.Constraint)","category":"page"},{"location":"Level1.html#OREnvironment.is_increment_feasible-Tuple{Int64, Real, Float64, OREnvironment.Constraint}","page":"Constraints","title":"OREnvironment.is_increment_feasible","text":"is_increment_feasible(var, Δ, currentLHS, c)\n\nFor a change of Δ in the value of variable var, returns if new left-hand side consumption in constraint c is feasible given the current consumption currentLHS.\n\nExample\n\njulia> c = OREnvironment.constructConstraint(12.0, :lessOrEq, [1, 3, 4], [2.0, 5.0, 3.0]);\njulia> Δ = 3; currentLHS = 9.0;\njulia> OREnvironment.is_increment_feasible(1, Δ, currentLHS, c)\nfalse # new lhs would be 15 which larger than 12\n\n\n\n\n\n","category":"method"},{"location":"Level1.html#Methods-where-type-Solution-is-also-involved","page":"Constraints","title":"Methods where type Solution is also involved","text":"","category":"section"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"In these methods, an struct called solution is also involved. Check Solutions for a better understanding.","category":"page"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.is_increment_feasible(s::OREnvironment.Solution, constraints::Array{<:OREnvironment.Constraint,1}, variable::Int, variable::Real, idxConstraints::Array{Int,1})","category":"page"},{"location":"Level1.html#OREnvironment.is_increment_feasible-Tuple{OREnvironment.Solution, Vector{var\"#s1\"} where var\"#s1\"<:OREnvironment.Constraint, Int64, Real, Vector{Int64}}","page":"Constraints","title":"OREnvironment.is_increment_feasible","text":"is_increment_feasible(s, vconstraints, var, Δ, idxConstraints)\n\nGiven solution s, the constraints of the problem vconstraints, a change Δ (respect to the current solution s) in variable var and an Array with the constraint indexes where variable var appears, returns if the change is feasible or not.\n\nNote: That the change is feasible DOES NOT mean that the solution is feasible. Given a feasible solution, a feasible change implies that the new solution is still feasible. But given an infeasible solution, a feasible change means that the constraints where var appears are not violated by the current change. However, as the original solution was infeasible, the new one is still infeasible. If the return of the function is false, then the solution after the change is infeasible regardless of the original feasibility situation.\n\nSee examples in the file with the tests: ./test/Constraints.jl.\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.is_current_consumption_feasible(s::OREnvironment.Solution, constraints::Array{<:OREnvironment.Constraint,1})","category":"page"},{"location":"Level1.html#OREnvironment.is_current_consumption_feasible-Tuple{OREnvironment.Solution, Vector{var\"#s1\"} where var\"#s1\"<:OREnvironment.Constraint}","page":"Constraints","title":"OREnvironment.is_current_consumption_feasible","text":"is_current_consumption_feasible(s, vconstraints)\n\nReturns true if the current consumption associated with solution s is feasible respect to constraints vconstraints.\n\nNote: This function DOES NOT compute the current consumption of solution s. It just checks the last values saved in memory and compare them with the right-hand side values of the constraints. This is for efficiency reasons. Usually, given a solution s, when you locally modified it, it is possible to efficiently recompute the current consumption of the solution by just checking the constraints affected by the change. Therefore, to check feasibility it would be a waste of time to recompute the left-hand sides again instead of checking the values in memory.\n\nIf the lhs must be recomputed to check feasibility, use function is_feasible(s::OREnvironment.Solution, constraints::Array{<:OREnvironment.Constraint,1}) instead.\n\nSee examples in the file with the tests: ./test/Constraints.jl.\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.compute_lhs(c::OREnvironment.Constraint, s::OREnvironment.Solution)","category":"page"},{"location":"Level1.html#OREnvironment.compute_lhs-Tuple{OREnvironment.Constraint, OREnvironment.Solution}","page":"Constraints","title":"OREnvironment.compute_lhs","text":"compute_lhs(c, s)\n\nComputes the consumption (left-hand side) of constraint c by solution s.\n\nNote: It returns the value of the lhs, but it DOES NOT modified the consumption status of solution s.\n\nSee examples in the file with the tests: ./test/Constraints.jl.\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.is_feasible(s::OREnvironment.Solution, constraints::Array{<:OREnvironment.Constraint,1})","category":"page"},{"location":"Level1.html#OREnvironment.is_feasible-Tuple{OREnvironment.Solution, Vector{var\"#s1\"} where var\"#s1\"<:OREnvironment.Constraint}","page":"Constraints","title":"OREnvironment.is_feasible","text":"is_feasible(s, vconstraints)\n\nReturns true if the consumption incurred by solution s is feasible respect to constraints vconstraints.\n\nNote: This function computes the left-hand sides of constraints using s, but it DOES NOT update the current consumption of solution s.\n\nTip: If the lhs does not have to be recomputed, then check function is_current_consumption_feasible for a better performance. Actually, that function should be preferred over is_feasible(s, vconstraints).\n\nSee examples in the file with the tests: ./test/Constraints.jl.\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.is_active(c::OREnvironment.Constraint, s::OREnvironment.Solution)","category":"page"},{"location":"Level1.html#OREnvironment.is_active-Tuple{OREnvironment.Constraint, OREnvironment.Solution}","page":"Constraints","title":"OREnvironment.is_active","text":"is_active(c, s)\n\nReturns true if constraint c is active under the consumption incurred by solution s. \n\nNote: This function computes the left-hand side of the constraint using s, but it DOES NOT update the current consumption of solution s.\n\nTip: If the lhs does not have to be recomputed, then check function is_active_under_current_consumption for a better performance. Actually, that function should be preferred over this one.\n\nSee examples in the file with the tests: ./test/Constraints.jl.\n\n\n\n\n\n","category":"method"},{"location":"Level1.html","page":"Constraints","title":"Constraints","text":"OREnvironment.is_active_under_current_consumption(c::OREnvironment.Constraint, idxConstraint::Int, s::OREnvironment.Solution)","category":"page"},{"location":"Level1.html#OREnvironment.is_active_under_current_consumption-Tuple{OREnvironment.Constraint, Int64, OREnvironment.Solution}","page":"Constraints","title":"OREnvironment.is_active_under_current_consumption","text":"is_active_under_current_consumption(c, idx, s)\n\nReturns true if the idx-th constraint (c) is active under the consumption incurred by solution s. \n\nNote: This function DOES NOT compute the current consumption of solution s. It just checks the last value saved in memory and compare it with the right-hand side values of the constraint. That is why idx must be provided.\n\nIf the lhs must be recomputed, use function is_active(c::OREnvironment.Constraint, s::OREnvironment.Solution) instead.\n\nSee examples in the file with the tests: ./test/Constraints.jl.\n\n\n\n\n\n","category":"method"},{"location":"Level2.html#Problem-environment","page":"Problem environment","title":"Problem environment","text":"","category":"section"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"Usually, in MILP, a problem is defined by an objective function and a collection of constraints. To handle this structure altogether, OREnvironment provides a struct which saves the following information:","category":"page"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"The cost coefficients of the objective function. This is an array of Float64.\nAn array with the constraints of the problem. See Constraints.\nAn array where the i-th element is an array with the constraint indexes where the i-th variable appears. This array is used for efficiency reasons in operations and it is built automatically by the constructor calling method OREnvironment.get_relationship_variables_constraints.\nThe sense of the optimization problem. Valid symbols are :max and :min.\nThe bounds of the variables.","category":"page"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"As an example of how to build a problem, let's assume we have a vector of costs and a vector with the constraints of the problem. See Constraints for examples and details about how to build the latter. Then:","category":"page"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"cost = rand(6); # so we have 6 variables in the problem\nc1 = OREnvironment.constructConstraint(15.0, :lessOrEq, [1,3,4,6], [2.3, 3.2, 3.1, 12.34]);\nc2 = OREnvironment.constructConstraint(9.0,  :lessOrEq, [1,3,5,6], [3.3, 4.2, 4.1, 13.34]);\nconstraints = [c1, c2];\ndomain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\nmyProblem = OREnvironment.constructProblem(cost, constraints, :max, domain) ","category":"page"},{"location":"Level2.html#Methods-for-problem","page":"Problem environment","title":"Methods for problem","text":"","category":"section"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"Pages = [\"Level2.md\"]","category":"page"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.constructProblem(costs::Array{Float64,1},constraints::Array{<:OREnvironment.Constraint,1},objSense::Symbol,domain::Array{OREnvironment.VariableDomain,1}) ","category":"page"},{"location":"Level2.html#OREnvironment.constructProblem-Tuple{Vector{Float64}, Vector{var\"#s1\"} where var\"#s1\"<:OREnvironment.Constraint, Symbol, Vector{OREnvironment.VariableDomain}}","page":"Problem environment","title":"OREnvironment.constructProblem","text":"constructProblem(c, vconstr, objSense, vdomains)\n\nConstructs a DefaultProblem struct by providing the vector of cost coefficients c, the vector of constraint of the problem vconstr, the objective sense, and the vector of domains of the variables.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> OREnvironment.constructProblem(cost, constraints, :max, domain)\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.get_lb_variable(p::OREnvironment.Problem, variable::Int)","category":"page"},{"location":"Level2.html#OREnvironment.get_lb_variable-Tuple{OREnvironment.Problem, Int64}","page":"Problem environment","title":"OREnvironment.get_lb_variable","text":"get_lb_variable(p, var)\n\nReturns the lower bound of variable var.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> OREnvironment.get_lb_variable(p, 1);\n0.0\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.set_lb_variable!(p::OREnvironment.Problem, variable::Int, lb::Float64) ","category":"page"},{"location":"Level2.html#OREnvironment.set_lb_variable!-Tuple{OREnvironment.Problem, Int64, Float64}","page":"Problem environment","title":"OREnvironment.set_lb_variable!","text":"set_lb_variable!(p, var, val)\n\nSet the lower bound of variable var to value val.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> OREnvironment.set_lb_variable!(p, 1, 1.0);\njulia> OREnvironment.get_lb_variable(p, 1);\n1.0\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.get_ub_variable(p::OREnvironment.Problem, variable::Int) ","category":"page"},{"location":"Level2.html#OREnvironment.get_ub_variable-Tuple{OREnvironment.Problem, Int64}","page":"Problem environment","title":"OREnvironment.get_ub_variable","text":"get_ub_variable(p, var)\n\nReturns the upper bound of variable var.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> OREnvironment.get_ub_variable(p, 1);\n1.0\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.set_ub_variable!(p::OREnvironment.Problem, variable::Int, ub::Float64) ","category":"page"},{"location":"Level2.html#OREnvironment.set_ub_variable!-Tuple{OREnvironment.Problem, Int64, Float64}","page":"Problem environment","title":"OREnvironment.set_ub_variable!","text":"set_ub_variable!(p, var, val)\n\nSet the upper bound of variable var to value val.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> OREnvironment.set_ub_variable!(p, 1, 3.0);\njulia> OREnvironment.get_ub_variable(p, 1);\n3.0\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.is_value_within_the_domain(p::OREnvironment.Problem, variable::Int, value::T) where {T<:Real}","category":"page"},{"location":"Level2.html#OREnvironment.is_value_within_the_domain-Union{Tuple{T}, Tuple{OREnvironment.Problem, Int64, T}} where T<:Real","page":"Problem environment","title":"OREnvironment.is_value_within_the_domain","text":"is_value_within_the_domain(p, var, val)\n\nChecks if for variable var, value val is within its domain.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> OREnvironment.is_value_within_the_domain(p, 1, 3.0)\nfalse\njulia> OREnvironment.is_value_within_the_domain(p, 1, 0.5)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.get_middle_point_variable_domain(p::OREnvironment.Problem, variable::Int)","category":"page"},{"location":"Level2.html#OREnvironment.get_middle_point_variable_domain-Tuple{OREnvironment.Problem, Int64}","page":"Problem environment","title":"OREnvironment.get_middle_point_variable_domain","text":"get_middle_point_variable_domain(p, var)\n\nComputes the middle point corresponding to the domain of variable var.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> OREnvironment.get_middle_point_variable_domain(p, 1);\n0.5\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.get_number_of_variables(p::OREnvironment.Problem) ","category":"page"},{"location":"Level2.html#OREnvironment.get_number_of_variables-Tuple{OREnvironment.Problem}","page":"Problem environment","title":"OREnvironment.get_number_of_variables","text":"get_number_of_variables(p)\n\nReturns the number of variables in problem p.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> OREnvironment.get_number_of_variables(p);\n6\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.get_number_of_constraints(p::OREnvironment.Problem) ","category":"page"},{"location":"Level2.html#OREnvironment.get_number_of_constraints-Tuple{OREnvironment.Problem}","page":"Problem environment","title":"OREnvironment.get_number_of_constraints","text":"get_number_of_constraints(p)\n\nReturns the number of constraints in problem p. This does not include variables bounds.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> OREnvironment.get_number_of_constraints(p);\n2\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.get_cost(p::OREnvironment.Problem, variable::Int) ","category":"page"},{"location":"Level2.html#OREnvironment.get_cost-Tuple{OREnvironment.Problem, Int64}","page":"Problem environment","title":"OREnvironment.get_cost","text":"get_cost(p, var)\n\nReturns the cost coefficient of variable var.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> OREnvironment.get_cost(p, 1);\n1.0\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.set_cost!(p::OREnvironment.Problem, variable::Int, value::Float64)","category":"page"},{"location":"Level2.html#OREnvironment.set_cost!-Tuple{OREnvironment.Problem, Int64, Float64}","page":"Problem environment","title":"OREnvironment.set_cost!","text":"set_cost!(p, var, coef)\n\nSets coef as cost coefficient of variable var.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> OREnvironment.set_cost!(p, 1, 1.5);\njulia> OREnvironment.get_cost(p, 1);\n1.5\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.get_obj_sense(p::OREnvironment.Problem)","category":"page"},{"location":"Level2.html#OREnvironment.get_obj_sense-Tuple{OREnvironment.Problem}","page":"Problem environment","title":"OREnvironment.get_obj_sense","text":"get_obj_sense(p)\n\nReturns the objetive sense of the problem.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> OREnvironment.get_obj_sense(p);\n:max\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.set_obj_sense!(p::OREnvironment.Problem, value::Symbol)","category":"page"},{"location":"Level2.html#OREnvironment.set_obj_sense!-Tuple{OREnvironment.Problem, Symbol}","page":"Problem environment","title":"OREnvironment.set_obj_sense!","text":"set_obj_sense!(p, objSense)\n\nSets objSense as the objetive sense of the problem.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> OREnvironment.set_obj_sense!(p, :min);\njulia> OREnvironment.get_obj_sense(p);\n:min\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.get_constraint(p::OREnvironment.Problem, idxConstraint::Int)","category":"page"},{"location":"Level2.html#OREnvironment.get_constraint-Tuple{OREnvironment.Problem, Int64}","page":"Problem environment","title":"OREnvironment.get_constraint","text":"get_constraint(p, i)\n\nReturns the i-th constraint of the problem.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> OREnvironment.get_constraint(p, 1)\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.get_constraints(p::OREnvironment.Problem)","category":"page"},{"location":"Level2.html#OREnvironment.get_constraints-Tuple{OREnvironment.Problem}","page":"Problem environment","title":"OREnvironment.get_constraints","text":"get_constraints(p)\n\nReturns the constraints of the problem.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> OREnvironment.get_constraints(p)\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.get_constraints_of_variable(p::OREnvironment.Problem, variable::Int)","category":"page"},{"location":"Level2.html#OREnvironment.get_constraints_of_variable-Tuple{OREnvironment.Problem, Int64}","page":"Problem environment","title":"OREnvironment.get_constraints_of_variable","text":"get_constraints_of_variable(p, var)\n\nReturns the indexes of the constraints where variable var appears in the problem.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> OREnvironment.get_constraints_of_variable(p, 1)\n[1, 2] # variable 1 appears in both constraints\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.add_constraint!(p::OREnvironment.Problem, c::OREnvironment.Constraint) ","category":"page"},{"location":"Level2.html#OREnvironment.add_constraint!-Tuple{OREnvironment.Problem, OREnvironment.Constraint}","page":"Problem environment","title":"OREnvironment.add_constraint!","text":"add_constraint!(p, c)\n\nAdds constraint c to problem p. It is also possible to provide a vector of constraints instead of a single constraint.\n\nNote: The vector indicating which variables appears in which constraints is also updated here.\n\nExample\n\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> c = OREnvironment.constructConstraint(3.9, :equal, [5, 6], [1.4, 11.0]);\njulia> OREnvironment.add_constraint!(p, c);\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.is_feasible(p::OREnvironment.Problem, s::OREnvironment.Solution)","category":"page"},{"location":"Level2.html#OREnvironment.is_feasible-Tuple{OREnvironment.Problem, OREnvironment.Solution}","page":"Problem environment","title":"OREnvironment.is_feasible","text":"is_feasible(p, s)\n\nChecks if the current status of solution s is feasible for problem p, regarding constraints and variables bounds. \n\nNote: This function DOES NOT compute the current consumption of solution s. It just checks the last values saved in memory and compare them with the right-hand side values of the constraints. \n\nExample\n\njulia> typeVariables = Int; numVariables = 6;  numConstraints = 2;\njulia> status = OREnvironment.constructStatus(numConstraints);\njulia> args = (typeVariables, numVariables, status);\njulia> s = OREnvironment.constructSolution(:FixedLengthArray, args)\njulia> cost = collect(1.0:6.0);\njulia> variables1 = [1, 3, 4, 6];\njulia> variables2 = [1, 3, 5, 6];\njulia> coefs1 = [2.3, 3.2, 3.1, 12.34];\njulia> coefs2 = coefs1 .+ 1.0;\njulia> constraint1 = OREnvironment.constructConstraint(15.0, :lessOrEq, variables1, coefs1);\njulia> constraint2 = OREnvironment.constructConstraint(9.0, :lessOrEq, variables2, coefs2);\njulia> constraints = [constraint1, constraint2];\njulia> domain = [OREnvironment.VariableDomain(0.0,1.0) for i in 1:6];\njulia> p = OREnvironment.constructProblem(cost, constraints, :max, domain);\njulia> OREnvironment.is_feasible(p,s)\ntrue\njulia> OREnvironment.add_solution!(s, 1, 2) # value 2 violates domain\njulia> OREnvironment.is_feasible(p,s)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"Level2.html","page":"Problem environment","title":"Problem environment","text":"OREnvironment.gap(lowerBound::Float64, upperBound::Float64, objSense::Symbol)","category":"page"},{"location":"Level2.html#OREnvironment.gap-Tuple{Float64, Float64, Symbol}","page":"Problem environment","title":"OREnvironment.gap","text":"gap(LB, UB, objSense)\n\nReturns the gap between the lower bound LB and the upper bound UB. The computation changes depending on the objective sense of the problem.\n\nExample\n\njulia> LB = 7.0;\njulia> UB = 9.0;\njulia> OREnvironment.gap(LB, UB, :min) == (UB-LB)/LB\ntrue\njulia> OREnvironment.gap(LB, UB, :max) == (UB-LB)/UB\ntrue\n\n\n\n\n\n","category":"method"},{"location":"Level3.html#Status","page":"Status","title":"Status","text":"","category":"section"},{"location":"Level3.html","page":"Status","title":"Status","text":"Status is a struct oriented to save the current status of a given solution. That is, information related to the solution which is more efficient to save in memory than recomputing it all the time. E.g, if the solution is feasible or not.","category":"page"},{"location":"Level3.html","page":"Status","title":"Status","text":"The default struct provided can save info about:","category":"page"},{"location":"Level3.html","page":"Status","title":"Status","text":"Feasibility (boolean).\nOptimality (boolean)\nValue of the objective function (Float64).\nLeft-hand side values (a.k.a, constraint consumption). This is an array of Float64 of the same size that the number of constraints in the problem. Its purpose is to save the left-hand side values produced by a given solution. ","category":"page"},{"location":"Level3.html","page":"Status","title":"Status","text":"Note that the latter is mainly oriented to save time in the following way: Given a solution and the corresponding left-hand side values in the associated status, when the solution changes, it is possible to update the left-hand side values without recomputing everything from scratch.","category":"page"},{"location":"Level3.html","page":"Status","title":"Status","text":"To create a default status, just the number of constraints has to be provided.","category":"page"},{"location":"Level3.html","page":"Status","title":"Status","text":"numberConstraints = 12;\nmyStatus = OREnvironment.constructStatus(numberConstraints)","category":"page"},{"location":"Level3.html#Methods-for-status","page":"Status","title":"Methods for status","text":"","category":"section"},{"location":"Level3.html","page":"Status","title":"Status","text":"note: Note\nUnless your intention is to extend the default status provided in the package, forget about this section. The same methods are available for the solution struct. Check them in Solutions.","category":"page"},{"location":"Level3.html","page":"Status","title":"Status","text":"Pages = [\"Level3.md\"]","category":"page"},{"location":"Level3.html","page":"Status","title":"Status","text":"OREnvironment.constructStatus(numberConstraints::Int)","category":"page"},{"location":"Level3.html#OREnvironment.constructStatus-Tuple{Int64}","page":"Status","title":"OREnvironment.constructStatus","text":"constructStatus(nConstraints)\n\nConstructs a DefaultStatus. It is necessary to specify the number of constraints of the problem.\n\nExample\n\njulia> OREnvironment.constructStatus(5);\n\n\n\n\n\n","category":"method"},{"location":"Level3.html","page":"Status","title":"Status","text":"OREnvironment.is_feasible(s::OREnvironment.Status)","category":"page"},{"location":"Level3.html#OREnvironment.is_feasible-Tuple{OREnvironment.Status}","page":"Status","title":"OREnvironment.is_feasible","text":"is_feasible(s)\n\nReturns the feasibility value of status s.\n\nExample\n\njulia> s = OREnvironment.constructStatus(5);\njulia> OREnvironment.is_feasible(s)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"Level3.html","page":"Status","title":"Status","text":"OREnvironment.set_feasible!(s::OREnvironment.Status, value::Bool)","category":"page"},{"location":"Level3.html#OREnvironment.set_feasible!-Tuple{OREnvironment.Status, Bool}","page":"Status","title":"OREnvironment.set_feasible!","text":"set_feasible!(s, val)\n\nSets the feasibility value of status s to val.\n\nExample\n\njulia> s = OREnvironment.constructStatus(5);\njulia> OREnvironment.set_feasible!(s, true);\njulia> OREnvironment.is_feasible(s)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"Level3.html","page":"Status","title":"Status","text":"OREnvironment.is_optimal(s::OREnvironment.Status)","category":"page"},{"location":"Level3.html#OREnvironment.is_optimal-Tuple{OREnvironment.Status}","page":"Status","title":"OREnvironment.is_optimal","text":"is_optimal(s)\n\nReturns the optimality value of status s.\n\nExample\n\njulia> s = OREnvironment.constructStatus(5);\njulia> OREnvironment.is_optimal(s)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"Level3.html","page":"Status","title":"Status","text":"OREnvironment.set_optimal!(s::OREnvironment.Status, value::Bool)","category":"page"},{"location":"Level3.html#OREnvironment.set_optimal!-Tuple{OREnvironment.Status, Bool}","page":"Status","title":"OREnvironment.set_optimal!","text":"set_optimal!(s, val)\n\nSets the optimality value of status s to val.\n\nExample\n\njulia> s = OREnvironment.constructStatus(5);\njulia> OREnvironment.set_optimal!(s, true);\njulia> OREnvironment.is_optimal(s)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"Level3.html","page":"Status","title":"Status","text":"OREnvironment.get_objfunction(s::OREnvironment.Status)","category":"page"},{"location":"Level3.html#OREnvironment.get_objfunction-Tuple{OREnvironment.Status}","page":"Status","title":"OREnvironment.get_objfunction","text":"get_objfunction(s)\n\nReturns the objective function value of status s.\n\nExample\n\njulia> s = OREnvironment.constructStatus(5);\njulia> OREnvironment.get_objfunction(s)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"Level3.html","page":"Status","title":"Status","text":"OREnvironment.set_objfunction!(s::OREnvironment.Status, value::Float64)","category":"page"},{"location":"Level3.html#OREnvironment.set_objfunction!-Tuple{OREnvironment.Status, Float64}","page":"Status","title":"OREnvironment.set_objfunction!","text":"set_objfunction!(s, val)\n\nSets the objective function value of status s to val.\n\nExample\n\njulia> s = OREnvironment.constructStatus(5);\njulia> OREnvironment.set_objfunction!(s, 19.8);\njulia> OREnvironment.get_objfunction(s)\n19.8\n\n\n\n\n\n","category":"method"},{"location":"Level3.html","page":"Status","title":"Status","text":"OREnvironment.get_constraint_consumption(s::OREnvironment.Status, idxConstraint::Int)","category":"page"},{"location":"Level3.html#OREnvironment.get_constraint_consumption-Tuple{OREnvironment.Status, Int64}","page":"Status","title":"OREnvironment.get_constraint_consumption","text":"get_constraint_consumption(s, idx)\n\nReturns the consumption of the idx-th constraint in status s.\n\nExample\n\njulia> s = OREnvironment.constructStatus(5);\njulia> OREnvironment.get_constraint_consumption(s, 1)\n0.0\n\n\n\n\n\n","category":"method"},{"location":"Level3.html","page":"Status","title":"Status","text":"OREnvironment.set_constraint_consumption!(s::OREnvironment.Status, idxConstraint::Int, value::Float64)","category":"page"},{"location":"Level3.html#OREnvironment.set_constraint_consumption!-Tuple{OREnvironment.Status, Int64, Float64}","page":"Status","title":"OREnvironment.set_constraint_consumption!","text":"set_constraint_consumption!(s, idx, val)\n\nSets the consumption of the idx-th constraint to val in status s.\n\nExample\n\njulia> s = OREnvironment.constructStatus(5);\njulia> OREnvironment.set_constraint_consumption!(s, 2, 3.4);\njulia> OREnvironment.get_constraint_consumption(s, 2)\n3.4\n\n\n\n\n\n","category":"method"},{"location":"Level3.html","page":"Status","title":"Status","text":"OREnvironment.worst_value(objsense::Symbol)","category":"page"},{"location":"Level3.html#OREnvironment.worst_value-Tuple{Symbol}","page":"Status","title":"OREnvironment.worst_value","text":"worst_value(objSense)\n\nReturns the worst value of the objetive function according to the objective sense of the problem.\n\nExample\n\njulia> OREnvironment.worst_value(:max)\n-Inf\njulia> OREnvironment.worst_value(:min)\nInf\n\n\n\n\n\n","category":"method"},{"location":"Level3.html","page":"Status","title":"Status","text":"OREnvironment.is_first_status_better(s1::OREnvironment.Status, s2::OREnvironment.Status, objSense::Symbol, feasibilityRequiered::Bool)","category":"page"},{"location":"Level3.html#OREnvironment.is_first_status_better-Tuple{OREnvironment.Status, OREnvironment.Status, Symbol, Bool}","page":"Status","title":"OREnvironment.is_first_status_better","text":"is_first_status_better(s1, s2, objSense, feasibilityRequiered)\n\nReturns if status s1 is better than status s2. For the comparaison is required the objective function sense and if feasibility is a must for the comparaison.\n\nExample\n\njulia> s1 = OREnvironment.constructStatus(5);\njulia> OREnvironment.set_feasible!(s1, true);\njulia> OREnvironment.set_objfunction!(s1, 19.8);\njulia> s2 = OREnvironment.constructStatus(5);\njulia> OREnvironment.set_feasible!(s2, false);\njulia> OREnvironment.set_objfunction!(s2, 100.0);\njulia> OREnvironment.is_first_status_better(s1, s2, :max, true)\ntrue\njulia> OREnvironment.is_first_status_better(s1, s2, :max, false)\nfalse\njulia> OREnvironment.set_feasible!(s2, true);\njulia> OREnvironment.is_first_status_better(s1, s2, :max, true)\nfalse\njulia> OREnvironment.is_first_status_better(s1, s2, :min, true)\ntrue\n\n\n\n\n\n","category":"method"},{"location":"Level3.html#Methods-for-DefaultStatus","page":"Status","title":"Methods for DefaultStatus","text":"","category":"section"},{"location":"Level3.html","page":"Status","title":"Status","text":"If you implement a new status, you also have to implement this method.","category":"page"},{"location":"Level3.html","page":"Status","title":"Status","text":"OREnvironment.update_status!(oldStatus::OREnvironment.DefaultStatus, newStatus::OREnvironment.DefaultStatus)","category":"page"},{"location":"Level3.html#OREnvironment.update_status!-Tuple{OREnvironment.DefaultStatus, OREnvironment.DefaultStatus}","page":"Status","title":"OREnvironment.update_status!","text":"update_status!(s1, s2)\n\nCopies info of status s2 to s1.\n\nExample\n\njulia> s1 = OREnvironment.constructStatus(5);\njulia> s2 = OREnvironment.constructStatus(5);\njulia> OREnvironment.set_feasible!(s2, true);\njulia> OREnvironment.set_optimal!(s2, true);\njulia> OREnvironment.set_objfunction!(s2, 100.0);\njulia> OREnvironment.is_feasible(s1)\nfalse\njulia> OREnvironment.is_optimal(s1)\nfalse\njulia> OREnvironment.get_objfunction(s1)\n0.0\njulia> OREnvironment.update_status!(s1, s2);\njulia> OREnvironment.is_feasible(s1)\ntrue\njulia> OREnvironment.is_optimal(s1)\ntrue\njulia> OREnvironment.get_objfunction(s1)\n100.0\n\n\n\n\n\n","category":"method"}]
}
